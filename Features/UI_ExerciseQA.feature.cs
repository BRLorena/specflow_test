// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExerciseQA.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Exercises UI testing")]
    public partial class ExercisesUITestingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UI_ExerciseQA.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Exercises UI testing", "    As a [ROLE]\r\n    I want to [DO SOMETHING]", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
    testRunner.Given("the user is at \'https://demoqa.com/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
    testRunner.And("chooses the area \'Elements\' to start his exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User wants to create a new account")]
        [NUnit.Framework.CategoryAttribute("NewUser")]
        public void UserWantsToCreateANewAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "NewUser"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to create a new account", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 11
        testRunner.And("clicks Text Box at Elements menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Full Name",
                            "Email",
                            "Current Adress",
                            "Permanent Adress"});
                table1.AddRow(new string[] {
                            "Bruno",
                            "a@a.pt",
                            "VWFS-PAC-Porto",
                            "VWFS$#1"});
#line 12
        testRunner.When("the user submits the new user information", ((string)(null)), table1, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Email",
                            "Current Adress",
                            "Permanent Adress"});
                table2.AddRow(new string[] {
                            "Bruno",
                            "a@a.pt",
                            "VWFS-PAC-Porto",
                            "VWFS$#1"});
#line 15
        testRunner.Then("the user sees a box with the created user", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User wants to interact with the Text Box")]
        [NUnit.Framework.CategoryAttribute("webtable")]
        public void UserWantsToInteractWithTheTextBox()
        {
            string[] tagsOfScenario = new string[] {
                    "webtable"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to interact with the Text Box", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 22
        testRunner.And("clicks Web Tables at Elements menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "First Name",
                            "Last Name",
                            "Email",
                            "Age",
                            "Salary",
                            "Department"});
                table3.AddRow(new string[] {
                            "Bruno",
                            "Lorena",
                            "a@a.pt",
                            "27",
                            "90",
                            "Tests"});
#line 23
        testRunner.When("added the following user", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "First Name",
                            "Last Name",
                            "Email",
                            "Age",
                            "Salary",
                            "Department"});
                table4.AddRow(new string[] {
                            "Bruno",
                            "Lorena",
                            "a@a.pt",
                            "27",
                            "90",
                            "Tests"});
#line 26
        testRunner.Then("sees the user at the table", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User wants to interact with the Table")]
        [NUnit.Framework.CategoryAttribute("TableInteractions")]
        public void UserWantsToInteractWithTheTable()
        {
            string[] tagsOfScenario = new string[] {
                    "TableInteractions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to interact with the Table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 33
        testRunner.And("clicks Web Tables at Elements menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
        testRunner.When("the user orders columns by \'First Name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
        testRunner.Then("the values of \'First Name\' are ordered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User wants to create a Student Registration Form")]
        [NUnit.Framework.CategoryAttribute("practiceform")]
        public void UserWantsToCreateAStudentRegistrationForm()
        {
            string[] tagsOfScenario = new string[] {
                    "practiceform"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to create a Student Registration Form", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 40
        testRunner.Given("the user is at \'https://demoqa.com/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
        testRunner.And("chooses the area \'Forms\' to start his exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
        testRunner.And("clicks Practice Form at Forms menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "First Name",
                            "Last Name",
                            "Email",
                            "Gender",
                            "Mobile",
                            "Date of Birth",
                            "Subjects",
                            "Hobbies",
                            "Current Adress",
                            "State",
                            "City"});
                table5.AddRow(new string[] {
                            "Bruno",
                            "Lorena",
                            "mm@abc.pt",
                            "Male",
                            "9123456789",
                            "10-09-1995",
                            "Chemistry Arts",
                            "Sports, Reading",
                            "Rua Professor",
                            "Uttar Pradesh",
                            "Agra"});
#line 43
        testRunner.When("added the following user table", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Student Name",
                            "Student Email",
                            "Gender",
                            "Mobile",
                            "Date of Birth",
                            "Subjects",
                            "Hobbies",
                            "Picture",
                            "Current Adress",
                            "State and City"});
                table6.AddRow(new string[] {
                            "Bruno Lorena",
                            "mm@abc.pt",
                            "Male",
                            "9123456789",
                            "10 September, 1995",
                            "Chemistry, Arts",
                            "Sports, Reading",
                            "",
                            "Rua Professor",
                            "Uttar Pradesh Agra"});
#line 46
        testRunner.Then("the values that are presented of the user are", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User wants to in")]
        [NUnit.Framework.CategoryAttribute("links")]
        [NUnit.Framework.TestCaseAttribute("201", "created", "Created", null)]
        [NUnit.Framework.TestCaseAttribute("204", "no-content", "No Content", null)]
        [NUnit.Framework.TestCaseAttribute("301", "moved", "Moved Permanently", null)]
        [NUnit.Framework.TestCaseAttribute("400", "bad-request", "Bad Request", null)]
        [NUnit.Framework.TestCaseAttribute("401", "unauthorized", "Unauthorized", null)]
        [NUnit.Framework.TestCaseAttribute("403", "forbidden", "Forbidden", null)]
        [NUnit.Framework.TestCaseAttribute("404", "invalid-url", "Not Found", null)]
        public void UserWantsToIn(string http_Code, string http_Status, string text, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "links"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("http_code", http_Code);
            argumentsOfScenario.Add("http_status", http_Status);
            argumentsOfScenario.Add("Text", text);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to in", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 53
        testRunner.And("clicks \'Links\' at Elements menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
        testRunner.When(string.Format("the user clicks on the link \'{0}\'", http_Status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
        testRunner.Then(string.Format("he sees the message Link has responded with status \'{0}\' and status text \'{1}\'", http_Code, text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
